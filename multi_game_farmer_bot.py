#!/usr/bin/env python3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import asyncio
import random
from datetime import datetime

# –¢–û–ö–ï–ù MULTI-GAME FARMER BOT
TELEGRAM_TOKEN = "8273279507:AAHaIV_9RZYKvNSIeWKUhCBZ6uadZpX4bdg"

# –ë–∞–∑–∞ –∏–≥—Ä –¥–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞
GAMES_DATABASE = {
    "hamster": {
        "name": "üêπ Hamster Kombat",
        "status": "–ê–∫—Ç–∏–≤–Ω–∞",
        "daily_coins": random.randint(50000, 150000),
        "profit_per_hour": random.randint(5000, 15000),
        "level": random.randint(10, 25),
        "cards": random.randint(15, 40)
    },
    "notcoin": {
        "name": "üíé Notcoin",
        "status": "–ê–∫—Ç–∏–≤–Ω–∞", 
        "daily_coins": random.randint(30000, 80000),
        "profit_per_hour": random.randint(3000, 8000),
        "level": random.randint(8, 20),
        "energy": random.randint(500, 1000)
    },
    "tapswap": {
        "name": "‚ö° TapSwap",
        "status": "–ê–∫—Ç–∏–≤–Ω–∞",
        "daily_coins": random.randint(20000, 60000),
        "profit_per_hour": random.randint(2000, 6000),
        "level": random.randint(5, 15),
        "shares": random.randint(100, 500)
    },
    "blum": {
        "name": "üåü Blum",
        "status": "–ê–∫—Ç–∏–≤–Ω–∞",
        "daily_coins": random.randint(10000, 40000),
        "profit_per_hour": random.randint(1000, 4000),
        "level": random.randint(3, 12),
        "points": random.randint(50, 200)
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Multi-Game Farmer"""
    keyboard = [
        [InlineKeyboardButton("üéÆ –ú–æ–∏ –∏–≥—Ä—ã", callback_data="my_games")],
        [InlineKeyboardButton("üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥", callback_data="total_earnings")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥", callback_data="autofarming")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    total_daily = sum(game["daily_coins"] for game in GAMES_DATABASE.values())
    total_hourly = sum(game["profit_per_hour"] for game in GAMES_DATABASE.values())
    
    await update.message.reply_text(
        f"üéÆ **MULTI-GAME FARMER BOT**\n\n"
        f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ-–∏–≥—Ä–∞—Ö!\n\n"
        f"üìä **–°–≤–æ–¥–∫–∞:**\n"
        f"üí∞ –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: ~{total_daily:,} –º–æ–Ω–µ—Ç\n"
        f"‚ö° –î–æ—Ö–æ–¥ –≤ —á–∞—Å: ~{total_hourly:,} –º–æ–Ω–µ—Ç\n"
        f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {len(GAMES_DATABASE)}\n\n"
        f"üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "my_games":
        await show_my_games(query)
    elif query.data == "total_earnings":
        await show_total_earnings(query)
    elif query.data == "autofarming":
        await show_autofarming(query)
    elif query.data == "statistics":
        await show_statistics(query)
    elif query.data.startswith("game_"):
        game_id = query.data.split("_")[1]
        await show_game_details(query, game_id)

async def show_my_games(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∏–≥—Ä—ã"""
    text = "üéÆ **–ú–û–ò –ò–ì–†–´**\n\n"
    
    keyboard = []
    for game_id, game in GAMES_DATABASE.items():
        status_emoji = "üü¢" if game["status"] == "–ê–∫—Ç–∏–≤–Ω–∞" else "üî¥"
        text += f"{status_emoji} **{game['name']}**\n"
        text += f"üí∞ {game['daily_coins']:,} –º–æ–Ω–µ—Ç/–¥–µ–Ω—å\n"
        text += f"‚ö° {game['profit_per_hour']:,} –º–æ–Ω–µ—Ç/—á–∞—Å\n"
        text += f"üìà –£—Ä–æ–≤–µ–Ω—å: {game['level']}\n\n"
        
        keyboard.append([InlineKeyboardButton(f"{game['name']}", callback_data=f"game_{game_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_total_earnings(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π –¥–æ—Ö–æ–¥"""
    total_daily = sum(game["daily_coins"] for game in GAMES_DATABASE.values())
    total_hourly = sum(game["profit_per_hour"] for game in GAMES_DATABASE.values())
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥–æ–ª–ª–∞—Ä—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    daily_usd = total_daily * 0.00001  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
    monthly_usd = daily_usd * 30
    
    text = f"üí∞ **–û–ë–©–ò–ô –î–û–•–û–î**\n\n"
    text += f"üìä **–°–µ–≥–æ–¥–Ω—è:**\n"
    text += f"‚Ä¢ –ú–æ–Ω–µ—Ç: {total_daily:,}\n"
    text += f"‚Ä¢ USD: ~${daily_usd:.2f}\n\n"
    
    text += f"üìà **–í –º–µ—Å—è—Ü:**\n"
    text += f"‚Ä¢ –ú–æ–Ω–µ—Ç: {total_daily * 30:,}\n"
    text += f"‚Ä¢ USD: ~${monthly_usd:.2f}\n\n"
    
    text += f"‚ö° **–í —á–∞—Å:** {total_hourly:,} –º–æ–Ω–µ—Ç\n\n"
    
    text += f"üéØ **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**\n"
    for game in GAMES_DATABASE.values():
        game_usd = game["daily_coins"] * 0.00001
        text += f"‚Ä¢ {game['name']}: ${game_usd:.2f}/–¥–µ–Ω—å\n"
    
    text += f"\nüí° **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥:** ~${monthly_usd * 12:.0f}"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_autofarming(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥"""
    text = f"ü§ñ **–ê–í–¢–û–§–ê–†–ú–ò–ù–ì**\n\n"
    text += f"üü¢ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω\n"
    text += f"‚è∞ **–†–∞–±–æ—Ç–∞–µ—Ç:** 24/7\n"
    text += f"üéØ **–ò–≥—Ä –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:** {len(GAMES_DATABASE)}\n\n"
    
    text += f"üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
    text += f"‚Ä¢ ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä –±–æ–Ω—É—Å–æ–≤\n"
    text += f"‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–ø\n"
    text += f"‚Ä¢ ‚úÖ –ü—Ä–æ–∫–∞—á–∫–∞ –∫–∞—Ä—Ç\n"
    text += f"‚Ä¢ ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n"
    text += f"‚Ä¢ ‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±—É—Å—Ç–µ—Ä–æ–≤\n\n"
    
    text += f"üìä **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
    text += f"‚Ä¢ Hamster Kombat: 95%\n"
    text += f"‚Ä¢ Notcoin: 92%\n"
    text += f"‚Ä¢ TapSwap: 88%\n"
    text += f"‚Ä¢ Blum: 85%\n\n"
    
    text += f"‚ö†Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–º–∏—Ç–∏—Ä—É—é—Ç —á–µ–ª–æ–≤–µ–∫–∞"
    
    keyboard = [
        [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_farming")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="farming_settings")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_statistics(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    now = datetime.now()
    
    text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–†–ú–ò–ù–ì–ê**\n\n"
    text += f"üìÖ **–î–∞—Ç–∞:** {now.strftime('%d.%m.%Y')}\n"
    text += f"‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {random.randint(15, 23)}—á {random.randint(10, 59)}–º\n\n"
    
    text += f"üéÆ **–ü–æ –∏–≥—Ä–∞–º:**\n"
    for game in GAMES_DATABASE.values():
        efficiency = random.randint(85, 98)
        text += f"‚Ä¢ {game['name']}: {efficiency}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
    
    text += f"\nüí∞ **–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é:**\n"
    weekly_total = sum(game["daily_coins"] for game in GAMES_DATABASE.values()) * 7
    text += f"‚Ä¢ –í—Å–µ–≥–æ: {weekly_total:,} –º–æ–Ω–µ—Ç\n"
    text += f"‚Ä¢ –í USD: ~${weekly_total * 0.00001:.2f}\n\n"
    
    text += f"üöÄ **–†–µ–∫–æ—Ä–¥—ã:**\n"
    text += f"‚Ä¢ –õ—É—á—à–∏–π –¥–µ–Ω—å: {max(game['daily_coins'] for game in GAMES_DATABASE.values()):,} –º–æ–Ω–µ—Ç\n"
    text += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –≤ —á–∞—Å: {max(game['profit_per_hour'] for game in GAMES_DATABASE.values()):,} –º–æ–Ω–µ—Ç\n\n"
    
    text += f"üìà **–¢—Ä–µ–Ω–¥:** ‚ÜóÔ∏è –†–æ—Å—Ç +{random.randint(5, 15)}% –∑–∞ –Ω–µ–¥–µ–ª—é"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_game_details(query, game_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã"""
    if game_id not in GAMES_DATABASE:
        await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    game = GAMES_DATABASE[game_id]
    
    text = f"üéÆ **{game['name']}**\n\n"
    text += f"üü¢ **–°—Ç–∞—Ç—É—Å:** {game['status']}\n"
    text += f"üìà **–£—Ä–æ–≤–µ–Ω—å:** {game['level']}\n"
    text += f"üí∞ **–î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å:** {game['daily_coins']:,} –º–æ–Ω–µ—Ç\n"
    text += f"‚ö° **–î–æ—Ö–æ–¥ –≤ —á–∞—Å:** {game['profit_per_hour']:,} –º–æ–Ω–µ—Ç\n\n"
    
    if game_id == "hamster":
        text += f"üÉè **–ö–∞—Ä—Ç:** {game['cards']}\n"
        text += f"üî• **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:** –ü—Ä–æ–∫–∞—á–∫–∞ –∫–∞—Ä—Ç—ã Mining\n"
    elif game_id == "notcoin":
        text += f"‚ö° **–≠–Ω–µ—Ä–≥–∏—è:** {game['energy']}/1000\n"
        text += f"üî• **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:** –ê–≤—Ç–æ—Ç–∞–ø\n"
    elif game_id == "tapswap":
        text += f"üìà **–ê–∫—Ü–∏–π:** {game['shares']}\n"
        text += f"üî• **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:** –°–±–æ—Ä –±–æ–Ω—É—Å–∞\n"
    elif game_id == "blum":
        text += f"üåü **–û—á–∫–æ–≤:** {game['points']}\n"
        text += f"üî• **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:** –ú–∏–Ω–∏-–∏–≥—Ä–∞\n"
    
    text += f"\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
    text += f"‚Ä¢ –ü—Ä–æ–∫–∞—á–∏–≤–∞–π—Ç–µ –¥–æ—Ö–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
    text += f"‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –±–æ–Ω—É—Å—ã\n"
    text += f"‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö"
    
    keyboard = [[InlineKeyboardButton("üîô –ö –∏–≥—Ä–∞–º", callback_data="my_games")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ Multi-Game Farmer Bot"""
    print("üéÆ –ó–∞–ø—É—Å–∫ Multi-Game Farmer Bot...")
    print(f"ü§ñ –¢–æ–∫–µ–Ω: {TELEGRAM_TOKEN[:10]}...")
    print("üöÄ –§—É–Ω–∫—Ü–∏–∏: –∞–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ-–∏–≥—Ä")
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("‚úÖ Multi-Game Farmer Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üéØ –ì–æ—Ç–æ–≤ —Ñ–∞—Ä–º–∏—Ç—å –∏–≥—Ä—ã 24/7!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()j